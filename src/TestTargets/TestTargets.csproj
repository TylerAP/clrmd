<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <SourceFileNameWithoutExtension>$([System.IO.Path]::GetFileNameWithoutExtension('$(SourceFile)'))</SourceFileNameWithoutExtension>
    </PropertyGroup>


    <PropertyGroup>
        <OutputType Condition="'$(OutputType)'!=''">Exe</OutputType>
        <Configuration>Release</Configuration>
        <TargetFramework>netcoreapp2.1</TargetFramework>
        <IsPackable>false</IsPackable>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <DebugSymbols>true</DebugSymbols>
        <DebugType>full</DebugType> <!-- TODO: PdbTests for other DebugTypes -->
        <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
        <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
        <IntermediateOutputPath>obj/$(Platform)</IntermediateOutputPath>
        <OutputPath>bin/$(Platform)</OutputPath>
        <AssemblyName Condition="'$(SourceFileNameWithoutExtension)'!=''">$(SourceFileNameWithoutExtension)</AssemblyName>
    </PropertyGroup>

    <ItemGroup>
        <None Remove="**/*"/>
        <Compile Remove="**/*"/>
        <Resource Remove="**/*"/>
        <Compile Include="$(SourceFile)" Condition="'$(SourceFile)'!=''"/>
    </ItemGroup>

    <ItemGroup Condition="'$(OutputType)'!='library'">
        <Reference Include="SharedLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">
            <HintPath>bin\AnyCPU\SharedLibrary.dll</HintPath>
        </Reference>
    </ItemGroup>


    <PropertyGroup Condition="'$(OS)'=='Windows_NT'">
        <DefaultWindowsSDKPath>$(MSBuildProgramFiles32)\Windows Kits\10\</DefaultWindowsSDKPath>
        <WindowsSDKPath Condition="'$(WindowsSDKPath)'==''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0@InstallationFolder)</WindowsSDKPath>
        <WindowsSDKPath Condition="'$(WindowsSDKPath)'==''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Microsoft SDKs\Windows\v10.0@InstallationFolder)</WindowsSDKPath>
        <WindowsSDKPath Condition="'$(WindowsSDKPath)'=='' AND Exists('$(DefaultWindowsSDKPath)')">$(DefaultWindowsSDKPath)</WindowsSDKPath>
        <WindowsSDKPath>$([MSBuild]::EnsureTrailingSlash('$(WindowsSDKPath)'))</WindowsSDKPath>
    </PropertyGroup>

    <Target Name="CreateTestTargetsDumpsNonWin" AfterTargets="Build" Condition="'$(OutputType)'!='library' AND '$(OS)'!='Windows_NT'">
        <!-- /usr/share/dotnet/shared/Microsoft.NETCore.App/*/createdump -->

        <PropertyGroup>
            <TargetDumpFileName>$(TargetDir)$(TargetName)</TargetDumpFileName>
        </PropertyGroup>
        
        <ItemGroup>
            <CreateDumpExecutable Include="/usr/share/dotnet/shared/Microsoft.NETCore.App/$(BundledNETCoreAppPackageVersion)/createdump" />
        </ItemGroup>

        <Message Text="Generating dumps for $(TargetPath)" />
        
        
        <!-- used this for locating dump artifacts; may be useful in future
        <ItemGroup>
            <TestTargetsTouchFile Include=".touch" />
        </ItemGroup>
        
        <Touch Files="@(TestTargetsTouchFile)" AlwaysCreate="true" ForceTouch="true" />
        -->

        <Exec Command="dotnet '$(TargetPath)' || mv core '$(TargetDumpFileName)_wks_mini_xplat.dmp'" EnvironmentVariables="COMPlus_DbgMiniDumpName=$(TargetName)_wks_mini_xplat.dmp;COMPlus_CreateDumpDiagnostics=1;COMPlus_DbgEnableMiniDump=1;COMPlus_DbgMiniDumpType=1;COMPLUS_BuildFlavor=WKS;COMPlus_gcServer=0" ContinueOnError="true" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="TargetOutputWksMini" />
        </Exec>

        <Exec Command="dotnet '$(TargetPath)' || mv core '$(TargetDumpFileName)_wks_xplat.dmp'" EnvironmentVariables="COMPlus_DbgMiniDumpName=$(TargetName)_wks_xplat.dmp;COMPlus_CreateDumpDiagnostics=1;COMPlus_DbgEnableMiniDump=1;COMPlus_DbgMiniDumpType=4;COMPLUS_BuildFlavor=WKS;COMPlus_gcServer=0" ContinueOnError="true" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="TargetOutputWks" />
        </Exec>

        <Exec Command="dotnet '$(TargetPath)' || mv core '$(TargetDumpFileName)_svr_mini_xplat.dmp'" EnvironmentVariables="COMPlus_DbgMiniDumpName=$(TargetName)_svr_mini_xplat.dmp;COMPlus_CreateDumpDiagnostics=1;COMPlus_DbgEnableMiniDump=1;COMPlus_DbgMiniDumpType=1;COMPLUS_BuildFlavor=SVR;COMPlus_gcServer=1" ContinueOnError="true" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="TargetOutputSvrMini" />
        </Exec>

        <Exec Command="dotnet '$(TargetPath)' || mv core '$(TargetDumpFileName)_svr_xplat.dmp'" EnvironmentVariables="COMPlus_DbgMiniDumpName=$(TargetName)_svr_xplat.dmp;COMPlus_CreateDumpDiagnostics=1;COMPlus_DbgEnableMiniDump=1;COMPlus_DbgMiniDumpType=4;COMPLUS_BuildFlavor=SVR;COMPlus_gcServer=1" ContinueOnError="true" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="TargetOutputSvr" />
        </Exec>

        <!-- used this for locating dump artifacts; may be useful in future
        <Exec Command="find / \( \( -path /sys \) -o \( -path /proc \) \) -prune -o -cnewer '%(TestTargetsTouchFile.Identity)'" ContinueOnError="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="CreatedFiles" />
        </Exec>
        
        <Error Text="$(CreatedFiles.Replace(';','&#10;'))" ContinueOnError="true" />
        -->
        
        <Error Condition="!Exists('$(TargetDumpFileName)_wks_mini_xplat.dmp')" Text="Failed to create $(TargetDumpFileName)_wks_mini_xplat.dmp'&#10;'$(TargetOutputWksMini.Replace(';','&#10;'))" />
        <Error Condition="!Exists('$(TargetDumpFileName)_wks_xplat.dmp')" Text="Failed to create $(TargetDumpFileName)_wks_xplat.dmp'&#10;'$(TargetOutputWks.Replace(';','&#10;'))" />
        <Error Condition="!Exists('$(TargetDumpFileName)_svr_mini_xplat.dmp')" Text="Failed to create $(TargetDumpFileName)_svr_mini_xplat.dmp'&#10;'$(TargetOutputSvrMini.Replace(';','&#10;'))" />
        <Error Condition="!Exists('$(TargetDumpFileName)_svr_xplat.dmp')" Text="Failed to create $(TargetDumpFileName)_svr_xplat.dmp'&#10;'$(TargetOutputSvr.Replace(';','&#10;'))" />
    </Target>
    
    <Target Name="CreateTestTargetsDumps" AfterTargets="Build" Condition="'$(OutputType)'!='library' AND '$(OS)'=='Windows_NT'">
        <Error Condition="!Exists('$(TargetPath)')" Text="$(TargetName) assembly missing."/>
        <Error Condition="'$(WindowsSDKPath)'==''" Text="Windows SDK not found."/>
        
        <PropertyGroup>
            <DotNet32Path Condition="'$(DotNet32Path)'==''">$(MsBuildProgramFiles32)\dotnet\dotnet.exe</DotNet32Path>
            <DotNet64Path Condition="'$(DotNet64Path)'==''">$(ProgramW6432)\dotnet\dotnet.exe</DotNet64Path>
        </PropertyGroup>
        
        <PropertyGroup>
            <TargetDumpFileDir>$(TargetDir.Replace('/','\'))</TargetDumpFileDir>
            <TargetDumpFileName>$(TargetDumpFileDir)$(TargetName)</TargetDumpFileName>
            <Cdb32Path>$(WindowsSDKPath)Debuggers\x86\cdb.exe</Cdb32Path>
            <Cdb64Path>$(WindowsSDKPath)Debuggers\x64\cdb.exe</Cdb64Path>
        </PropertyGroup>

        <Error Condition="!Exists('$(DotNet32Path)')" Text="32-bit dotnet.exe (DotNet32Path) not found." />
        <Error Condition="!Exists('$(DotNet64Path)')" Text="64-bit dotnet.exe (DotNet64Path) not found." />
        <Error Condition="!Exists('$(DotNet32Path)')" Text="Windows SDK appears to be missing Debugging Tools for Windows (x86) component." />
        <Error Condition="!Exists('$(DotNet64Path)')" Text="Windows SDK appears to be missing Debugging Tools for Windows (x64) component." />

        <Message Text="Generating dumps for $(TargetPath)" />
        
        <Exec Command="&quot;$(Cdb32Path)&quot; -g -G -c &quot;.dump /o /mA $(TargetDumpFileName)_wks.dmp;.dump /o /m $(TargetDumpFileName)_wks_mini.dmp;q&quot; &quot;$(DotNet32Path)&quot; &quot;$(TargetPath)&quot;" EnvironmentVariables="COMPLUS_BuildFlavor=WKS;COMPlus_gcServer=0" Condition="'$(Platform)'=='x86'"/>
        <Exec Command="&quot;$(Cdb64Path)&quot; -g -G -c &quot;.dump /o /mA $(TargetDumpFileName)_wks.dmp;.dump /o /m $(TargetDumpFileName)_wks_mini.dmp;q&quot; &quot;$(DotNet64Path)&quot; &quot;$(TargetPath)&quot;" EnvironmentVariables="COMPLUS_BuildFlavor=WKS;COMPlus_gcServer=0" Condition="'$(Platform)'=='x64'"/>

        <Exec Command="&quot;$(Cdb32Path)&quot; -g -G -c &quot;.dump /o /mA $(TargetDumpFileName)_svr.dmp;.dump /o /m $(TargetDumpFileName)_svr_mini.dmp;q&quot; &quot;$(DotNet32Path)&quot; &quot;$(TargetPath)&quot;" EnvironmentVariables="COMPLUS_BuildFlavor=SVR;COMPlus_gcServer=1" Condition="'$(Platform)'=='x86'"/>
        <Exec Command="&quot;$(Cdb64Path)&quot; -g -G -c &quot;.dump /o /mA $(TargetDumpFileName)_svr.dmp;.dump /o /m $(TargetDumpFileName)_svr_mini.dmp;q&quot; &quot;$(DotNet64Path)&quot; &quot;$(TargetPath)&quot;" EnvironmentVariables="COMPLUS_BuildFlavor=SVR;COMPlus_gcServer=1" Condition="'$(Platform)'=='x64'"/>
    </Target>

    <Target Name="IncrementalCleanHack" AfterTargets="_CleanGetCurrentAndPriorFileWrites" BeforeTargets="IncrementalClean">
        <ItemGroup>
            <!-- don't clean up output -->
            <_CleanPriorFileWrites Remove="$(TargetDir)/*"/>
            <_CleanPriorFileWrites Remove="$(TargetDir)/**/*"/>
        </ItemGroup>
    </Target>


</Project>
